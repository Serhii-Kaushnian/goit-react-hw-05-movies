{"version":3,"file":"static/js/653.e03b7f1f.chunk.js","mappings":"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","sources":["components/Movies/Movies.styled.js","components/Form/Form.styled.js","components/Form/Form.jsx","components/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const HomeWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 10px;\n`;\nexport const GalleryWrapper = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const GalleryItemWrapper = styled.li`\n  display: flex;\n  flex-direction: column;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  border-radius: 10px;\n  overflow: hidden;\n  height: 100%;\n`;\nexport const GalleryItemImage = styled.img`\n  width: 100%;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\nexport const MovieTitle = styled.p`\n  margin: 10px;\n  font-weight: 800;\n  font-size: 20px;\n  text-align: center;\n`;\nexport const LoadMoreButton = styled.button`\n  width: 100%;\n  padding: 10px 20px;\n  background-color: #3f51b5;\n  color: white;\n  font-size: 25px;\n  font-weight: 800;\n  border: none;\n  opacity: 0.8;\n  transition: opacity 250ms ease;\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\n","import styled from '@emotion/styled';\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #3f51b5;\n  margin-bottom: 10px;\n`;\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin: 0;\n`;\nexport const FormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Label = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { ImSearch } from 'react-icons/im';\n\nimport {\n  FormButton,\n  Input,\n  Label,\n  FormWrapper,\n  Container,\n} from './Form.styled';\n\nexport default function Form({ getResponse, onSubmit }) {\n  const [inputValue, setInputValue] = useState('');\n\n  const getMoviesBySearch = e => {\n    e.preventDefault();\n    onSubmit(inputValue);\n    setInputValue('');\n  };\n  const inputHandler = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  return (\n    <Container>\n      <FormWrapper onSubmit={getMoviesBySearch}>\n        <Input\n          onChange={inputHandler}\n          value={inputValue}\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n        />\n        <FormButton type=\"submit\">\n          <ImSearch />\n          <Label></Label>\n        </FormButton>\n      </FormWrapper>\n    </Container>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport Poster from '../../img/poster.png';\n\nimport Loader from 'components/Loader/Loader.jsx';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport {\n  GalleryItemImage,\n  GalleryItemWrapper,\n  GalleryWrapper,\n  LoadMoreButton,\n  MovieTitle,\n} from './Movies.styled';\nimport Form from 'components/Form/Form.jsx';\nimport styled from '@emotion/styled';\n\nconst APP_KEY = `8fcb73b25bea8ff19ff1e6b792856201`;\nconst BASE_URL = `https://api.themoviedb.org/3/`;\nconst CustomLink = styled(Link)`\n  color: black;\n  font-weight: 800;\n  font-size: 20px;\n  text-decoration: none;\n`;\nexport default function Movies() {\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState('');\n  const [loader, setLoader] = useState(false);\n  const [response, setResponse] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  useEffect(() => {\n    if (query.length > 0) {\n      let url = `${BASE_URL}search/movie?api_key=${APP_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`;\n      sendGetRequest(url);\n      setLoader(true);\n    } else if (query === '' && searchParams.get('q')) {\n      let url = `${BASE_URL}search/movie?api_key=${APP_KEY}&language=en-US&page=${page}&include_adult=false&query=${searchParams.get(\n        'q'\n      )}`;\n      sendGetRequest(url);\n      setLoader(true);\n    } else {\n      return;\n    }\n\n    async function sendGetRequest(link) {\n      try {\n        const resp = await axios.get(link);\n        if (resp.data.results.length === 0 && page !== 1) {\n          toast.info(`You reached last page`);\n        } else if (resp.data.results.length === 0) {\n          toast.info(`Search request ${query} is not found. Please  try again`);\n        }\n        setResponse(prev => [...prev, ...resp.data.results]);\n        setLoader(false);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }, [page, query, searchParams]);\n\n  const loadMore = () => {\n    setPage(prev => prev + 1);\n  };\n\n  const handleQuery = data => {\n    if (data === query) {\n      toast.info(`Search request ${data} is already chosen`);\n\n      return;\n    }\n    setResponse([]);\n    setPage(1);\n    setQuery(data);\n    setSearchParams({ q: data });\n  };\n  return (\n    <div>\n      <Form onSubmit={handleQuery} />\n\n      {response.length > 0 ? (\n        <GalleryWrapper>\n          {response.map(value => (\n            <GalleryItemWrapper key={value.id}>\n              <CustomLink to={`${value.id}`} state={{ from: location }}>\n                <GalleryItemImage\n                  src={\n                    value.poster_path\n                      ? `https://image.tmdb.org/t/p/original/${value.poster_path}`\n                      : Poster\n                  }\n                  alt={value.title ? value.title : value.name}\n                  width=\"350px\"\n                />\n                <MovieTitle>\n                  {value.title ? value.title : value.name}\n                </MovieTitle>\n              </CustomLink>\n            </GalleryItemWrapper>\n          ))}\n        </GalleryWrapper>\n      ) : null}\n\n      {loader && <Loader />}\n\n      <LoadMoreButton onClick={loadMore} type=\"button\">\n        Load more\n      </LoadMoreButton>\n    </div>\n  );\n}\n"],"names":["GalleryWrapper","styled","GalleryItemWrapper","GalleryItemImage","MovieTitle","LoadMoreButton","Container","FormWrapper","FormButton","Label","Input","Form","getResponse","onSubmit","useState","inputValue","setInputValue","e","preventDefault","onChange","currentTarget","value","className","type","autoComplete","autoFocus","placeholder","APP_KEY","BASE_URL","CustomLink","Link","Movies","page","setPage","query","setQuery","loader","setLoader","response","setResponse","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","length","sendGetRequest","get","link","axios","resp","data","results","toast","prev","console","error","q","map","to","id","state","from","src","poster_path","Poster","alt","title","name","width","Loader","onClick"],"sourceRoot":""}